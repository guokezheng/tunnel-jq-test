# 项目相关配置
ruoyi:
  # 名称
  name: Athena
  # 版本
  version: 1.3.7.0
  # 版权年份
  copyrightYear: 2021
  # 实例演示开关
  demoEnabled: true
  # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /home/ruoyi/uploadPath）
#  profile: /Users/yqc/OpenSources/ruoyi
  profile: D:/project/tunnel/uploadPath
#  profile: E:/
  # 获取ip地址开关
  addressEnabled: false
  # 验证码类型 math 数组计算 char 字符验证
  captchaType: math

  # 文件上传 本地: local  阿里云： alioss
  uploadType: local
  # 阿里云oss存储配置
  oss:
    bucketName: bucket-wisdom-oss
    # 这个需要在高速云网络环境下才可以访问，如果部署在高速云环境则需要打开此注释，目前先用IP
#    endPoint: oss-cn-jinan-sdhs-d01-a.ops.sdhs.cloud
    endPoint: 10.166.26.35
    accessKeyId: h1HEeliVnMImdxRH
    accessKeySecret: LpPPK7a9ZBRmRQyHIZJ5CmVxe7kLe8
    outAccessDomainName: https://${ruoyi.oss.bucketName}.${ruoyi.oss.endPoint}/
    upFolder: upload
# 开发环境配置
server:
  # 服务器的HTTP端口，默认为8080
  port: 8000
#  port: 7075
  servlet:
    # 应用的访问路径
    context-path: /
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    # tomcat最大线程数，默认为200
    max-threads: 800
    # Tomcat启动初始化的线程数，默认值25
    min-spare-threads: 30

# 日志配置
logging:
  level:
    com.ruoyi: debug
    org.springframework: warn

# Spring配置
spring:
  # 资源信息
  messages:
    # 国际化资源文件路径
    basename: i18n/messages
  profiles:
    active: dev
  # 文件上传
  servlet:
     multipart:
       # 单个文件大小
       max-file-size:  10MB
       # 设置总上传的文件大小
       max-request-size:  20MB
   # 初始化dispatcherServlet，默认-1未开启，0及以上为开启
  mvc:
     servlet:
       load-on-startup: 1
  # 服务模块
  devtools:
    restart:
      # 热部署开关
      enabled: true
  # redis 配置
  redis:
    # 地址
    host: 10.168.56.206
    # 端口，默认为6379
    port: 6379
    # 数据库索引
    database: 2
    # 密码
    password: Redis123!@#
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms

  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    druid:
      # 主库数据源
      master:
        url: jdbc:mysql://101.42.165.184:3306/tunnel-jq?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
        username: jq_user
        password: Platform123!@#
        # 从库数据源
      slave:
        # 从数据源开关/默认关闭
        enabled: false
        url:
        username:
        password:
      # 初始连接数
      initialSize: 5
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      maxEvictableIdleTimeMillis: 900000
      # 配置检测连接是否有效
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      webStatFilter:
        enabled: true
      statViewServlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        # 控制台管理用户名和密码
        login-username: ruoyi
        login-password: 123456
      filter:
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true

  kafka:
    listener:
      ack-mode: manual_immediate
    wanji:
      bootstrap-servers: 10.3.16.40:9092 # kafka集群信息，多个用逗号间隔
      # 生产者
      producer:
        # 重试次数，设置大于0的值，则客户端会将发送失败的记录重新发送
        retries: 3
        batch-size: 16384 #批量处理大小，16K
        buffer-memory: 33554432 #缓冲存储大，32M
        acks: 1
        # 指定消息key和消息体的编解码方式
        value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
        key-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      #      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      #      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 消费者
      consumer:
        # 消费者组
        group-id: TestGroup
        # 是否自动提交
        enable-auto-commit: false
        # 消费偏移配置
        # none：如果没有为消费者找到先前的offset的值,即没有自动维护偏移量,也没有手动维护偏移量,则抛出异常
        # earliest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从头开始消费
        # latest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从最新的数据开始消费
        auto-offset-reset: latest
        #      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
        #      key-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
        bootstrap-servers: 10.3.16.40:9092
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        max-poll-records: 500
      # 监听
    #    listener:
    #      # record：当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
    #      # batch：当每一批poll()的数据被ListenerConsumer处理之后提交
    #      # time：当每一批poll()的数据被ListenerConsumer处理之后，距离上次提交时间大于TIME时提交
    #      # count：当每一批poll()的数据被ListenerConsumer处理之后，被处理record数量大于等于COUNT时提交
    #      # count_time：TIME或COUNT中有一个条件满足时提交
    #      # manual：当每一批poll()的数据被ListenerConsumer处理之后, 手动调用Acknowledgment.acknowledge()后提交
    #      # manual_immediate：手动调用Acknowledgment.acknowledge()后立即提交，一般推荐使用这种
    #      ack-mode: manual_immediate
    #spring:
    #  kafka:
    wulian:
      #非正式环境使用地址，修改端口号避免推送测试数据
      bootstrap-servers: 10.166.139.204:9093,10.166.139.205:9093,10.166.139.206:9093
      #正式环境部署地址
      #bootstrap-servers: 10.166.139.204:9092,10.166.139.205:9092,10.166.139.206:9092
      producer:
        # 重试次数，设置大于0的值，则客户端会将发送失败的记录重新发送
        #        retries: 3
        #        batch-size: 16384 #批量处理大小，16K
        #        buffer-memory: 33554432 #缓冲存储大，32M
        #        acks: 1
        # 指定消息key和消息体的编解码方式
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.StringSerializer
        security:
          protocol: SASL_PLAINTEXT
          properties:
            sasl:
              mechanism: SCRAM-SHA-256
              jaas:
                config: org.apache.kafka.common.security.scram.ScramLoginModule required username='jq_tunnel' password='Sdhsg2021';
      consumer:
        group-id: tetet5ea
        enable-auto-commit: false # 不自动签收
        auto-offset-reset: earliest  #kafka出现错误重启后，会找到未消费的offset继续消费
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        max-poll-records: 5
        security:
          protocol: SASL_PLAINTEXT
          properties:
            sasl:
              mechanism: SCRAM-SHA-256
              jaas:
                config: org.apache.kafka.common.security.scram.ScramLoginModule required username='jq_tunnel' password='Sdhsg2021';
    #    listener:
    #      ack-mode: manual
    #      concurrency: 3
    huawei:
      #非正式环境使用地址，避免接收推送数据
      bootstrap-servers: 100.7.187.29:9092
      # 生产者
      producer:
        # 重试次数，设置大于0的值，则客户端会将发送失败的记录重新发送
        retries: 3
        batch-size: 16384 #批量处理大小，16K
        buffer-memory: 33554432 #缓冲存储大，32M
        acks: 1
        # 指定消息key和消息体的编解码方式
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.StringSerializer

      # 消费者
      consumer:
        # 消费者组
        group-id: HuaWeiGroup
        # 是否自动提交
        enable-auto-commit: false
        # 消费偏移配置
        # none：如果没有为消费者找到先前的offset的值,即没有自动维护偏移量,也没有手动维护偏移量,则抛出异常
        # earliest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从头开始消费
        # latest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从最新的数据开始消费
        auto-offset-reset: earliest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        max-poll-records: 500
      properties:
        max.poll.interval.ms: 1000000
  main:
    allow-bean-definition-overriding: true


# token配置
token:
    # 令牌自定义标识
    header: Authorization
    # 令牌密钥
    secret: abcdefghijklmnopqrstuvwxyz
    # 令牌有效期（默认30分钟）
    expireTime: 8760

# MyBatis Plus配置
mybatis-plus:
  # 搜索指定包别名
  typeAliasesPackage: com.ruoyi.**.domain,com.zc.**.domain,com.tunnel.**.domain
  # 配置mapper的扫描，找到所有的mapper.xml映射文件
  mapperLocations: classpath*:mapper/**/*Mapper.xml
  # 加载全局的配置文件
  configLocation: classpath:mybatis/mybatis-config.xml

# PageHelper分页插件
pagehelper:
  helperDialect: mysql
  supportMethodsArguments: true
  params: count=countSql

# Swagger配置
swagger:
  # 是否开启swagger
  enabled: false
  # 请求前缀
  pathMapping: /dev-api

knife4j:
  enable: true

# 防止XSS攻击
xss:
  # 过滤开关
  enabled: true
  # 排除链接（多个用逗号分隔）
  excludes: /system/notice
  # 匹配链接
  urlPatterns: /system/*,/monitor/*,/tool/*

zc:
  # websocket 配置项
  websocket:
    # 端口
    port: 7789
    # 路径
    path: "/ws"
    # 客户端认证密码
    password: "zc&ws123"
    # 心跳周期
    interval: 60
    # 超时周期
    timeoutIntervals: 5

# 滑块验证码
aj:
  captcha:
    # 缓存类型
    cache-type: redis
    # blockPuzzle 滑块 clickWord 文字点选  default默认两者都实例化
    type: blockPuzzle
    # 右下角显示字
    water-mark: Athena
    # 校验滑动拼图允许误差偏移量(默认5像素)
    slip-offset: 5
    # aes加密坐标开启或者禁用(true|false)
    aes-status: true
    # 滑动干扰项(0/1/2)
    interference-options: 2

#万集接口对接
wj:
  imagePath: /eventimage
  url: http://10.3.16.4/img


#两级平台权限控制：管理站、高速云
authorize:
  name: GLZ
  #name: GSY
  gsy:
    host: http://211.168.65.230:8000
    tunnel_push_url: ${authorize.gsy.host}/platform/api/tunnelsAccept
    device_push_url: ${authorize.gsy.host}/platform/api/devicesAccept
  glz_host:
    wzb_glz_host: http://211.168.65.231:8000
    th_glz_host: http://211.168.65.232:8000
    mz_glz_host: http://211.168.65.233:8000
    yts_glz_host: http://211.168.65.234:8000
    jly_glz_host: http://211.168.65.235:8000
  #管理站部门id配置，用于管理站分发
  dept_id:
    #文祖北隧道管理站，太河隧道管理站，庙子隧道管理站，仰天山隧道管理站，九龙峪隧道管理站
    wzb_glz_dept_id: 10101
    th_glz_dept_id: 10301
    mz_glz_dept_id: 10701
    yts_glz_dept_id: 10702
    jly_glz_dept_id: 10703
    #设备控制接口
  #control_device_url:
#高速云端可控权限
platform:
#  control: AGREE #同意
  control: DISAGREE #不同意

#物联中台事件topic
eventTopic: "wq_tunnelEvent"
#物联中台设备状态topic
devStatusTopic: "wq_devStatusTopic"

#物联中台设备基础数据topic
tunnelDeviceBaseData: "tunnelDeviceBaseData"
#物联中台隧道基础数据topic
tunnelBaseData: "tunnelBaseData"

#巡检任务topic
tunnelTaskList: "tunnelTaskList"
#巡检点topic
tunnelTaskPatrol: "tunnelTaskPatrol"
#操作记录topic
tunnelTaskOperation: "tunnelTaskOperation"
#故障topic
tunnelFaultList: "tunnelFaultList"


#视频平台接口调用地址、组织机构ID
video-platform:
  address: "http://10.166.147.60:9021"
  deptId: "10000037"


#系统对接配置
opm:
  #外部系统登录标识，默认使用admin获取token
  externalLogin:
    #访问标识
    appId: jq_tunnel
    loginName: admin
sso:
  url: http://10.166.157.192:31315
  # 获取授权码
  authCode: ${sso.url}/auth/sso/test/code
  # 获取Token
  token: ${sso.url}/auth/sso/token
  # 获取当前登录用户信息
  userInfo: ${sso.url}/sys/user/info
  # 获取组织机构树
  deptTree: ${sso.url}/sys/dept/tree/get_tree_all
  # 获取组织机构下的用户信息
  userList: ${sso.url}/sys/user/getUserListByCompanyAndDept
  #应急车辆第三方接口
  emergencyVehicle:
    syn: ${sso.url}/equipment/CarInfo/list
    edit: ${sso.url}/equipment/commandCenter/updateDispatchByDispatch
    detail: ${sso.url}/equipment/deviceCar/getCarInfo
  #业务中台分配应用ID
  appId: jq_tunnel_server
  clientSecret: qz_opm
  # 请求接口时获取token；使用单点登录方式获取token请求接口，如果系统中没有对应用户，获取token报错“账号或密码错误”
  generalTokenUrl: ${sso.url}/auth/client/token?appId=${sso.appId}&clientSecret=${sso.clientSecret}


device:
  hongmeng:
    #非正式环境使用地址，修改地址信息避免推送测试数据
    url: http://100.70.187.28:60400/qxsd-iot
    #正式环境部署地址
    #    url: http://10.7.187.28:60400/qxsd-iot
    dev:
      #风机控制
      fan: ${device.hongmeng.url}/deviceCtrl/fan/alterFanRunStatus
      #交通信号灯控制
      trafficLight: ${device.hongmeng.url}/deviceCtrl/trafficLight/alterTrafficLightRunStatus
      #车道指示器控制
      laneIndicator: ${device.hongmeng.url}/deviceCtrl/laneIndicator/alterLaneIndicatorRunStatus
      #卷帘门控制
      rollDoor: ${device.hongmeng.url}/deviceCtrl/rollDoor/alterRollDoorRunStatus


mqtt:
  #emqx地址+ MQTT协议端⼝ 1883
  url: tcp://10.168.56.206:1883
  clientInId: matt_test_in
  clientOutId: matt_test_out
#  clientId: matt_test
  topics: topic01,topic02,rhy/iot/control/fan/alterRunStatus
  qoslevel: 1
  #MQTT 认证
  username:  admin
  password: 123456
  # 10s
  timeout: 10000
  #20s
  keepalive: 20


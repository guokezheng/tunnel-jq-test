<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tunnel.business.mapper.event.SdStrategyMapper">

    <resultMap type="SdStrategy" id="SdStrategyResult">
        <result property="id"    column="id"    />
        <result property="tunnelId"    column="tunnel_id"    />
        <result property="strategyName"    column="strategy_name"    />
        <result property="strategyType"    column="strategy_type"    />
        <result property="strategyState" column="strategy_state" />
        <result property="strategyInfo"    column="strategy_info"    />
        <result property="warningId"    column="warning_id"    />
        <result property="schedulerTime"    column="scheduler_time"    />
        <result property="jobRelationId"    column="job_relation_id"    />
        <result property="direction"    column="direction"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="timerOpen"    column="timer_open"    />
        <result property="timerClose"    column="timer_close"    />
        <result property="strategyGroup"    column="strategy_group"    />
        <result property="eventType"    column="event_type"    />
        <result property="lx"    column="lx"    />
        <result property="fx"    column="fx"    />
        <result property="isAutomatic"    column="is_automatic"    />
        <association property="tunnels"  column="tunnel_id" javaType="SdTunnels" resultMap="tunnelResult" />
    </resultMap>

    <resultMap id="tunnelResult" type="SdTunnels">
		<id  property="tunnelId" column="tunnel_id" />
		<result property="tunnelName" column="tunnel_name"   />
	</resultMap>


    <sql id="selectSdStrategyVo">
        select sd_strategy.id, tunnel_id, strategy_name, strategy_type, strategy_state, strategy_info, warning_id, scheduler_time, job_relation_id,direction, create_by, create_time, update_by, update_time, is_automatic from sd_strategy
    </sql>

    <select id="selectSdStrategyList" parameterType="SdStrategy" resultMap="SdStrategyResult">
        select A.id, A.tunnel_id, A.strategy_name, A.strategy_type, A.strategy_info, A.warning_id, A.strategy_state,
        		A.scheduler_time, A.job_relation_id, A.direction,A.create_by, A.strategy_group,
        		A.create_time, A.update_by, A.update_time, B.tunnel_name, A.is_automatic, A.event_type,c.dict_label lx,f.dict_label fx
        from sd_strategy A
        left join sd_tunnels B on A.tunnel_id = B.tunnel_id
        left join sys_dict_data c on c.dict_value = A.strategy_type
        left join sys_dict_data f on f.dict_value = A.direction and f.dict_type = 'sd_strategy_direction'

        <where>
            <if test="id != null">and A.id = #{id}</if>
            <if test="tunnelId != null and tunnelId != ''"> and A.tunnel_id = #{tunnelId}</if>
            <if test="strategyName != null  and strategyName != ''"> and A.strategy_name like concat('%', #{strategyName}, '%')</if>
            <if test="strategyType != null  and strategyType != ''"> and A.strategy_type = #{strategyType}</if>
            <if test="strategyInfo != null  and strategyInfo != ''"> and A.strategy_info = #{strategyInfo}</if>
            <if test="schedulerTime != null  and schedulerTime != ''"> and A.scheduler_time = #{schedulerTime}</if>
            <if test="direction != null  and direction != ''"> and A.direction = #{direction}</if>
            <if test="strategyGroup != null  and strategyGroup != ''"> and A.strategy_group = #{strategyGroup}</if>
            <if test="eventType != null  and eventType != ''"> and A.event_type = #{eventType}</if>
            <if test="params.deptId != null and params.deptId != ''">
                AND (B.dept_id = #{params.deptId} OR B.dept_id IN ( SELECT d.dept_id FROM sys_dept d WHERE FIND_IN_SET (#{params.deptId},d.ancestors) ))
            </if>
            <if test="strategyGroup == '1'.toString()">
                and c.dict_type = 'sd_strategy_type'
            </if>
            <if test="strategyGroup == '2'.toString()">
                and c.dict_type = 'sys_common_event'
            </if>
            <if test="ids != null and ids != ''"> and FIND_IN_SET(A.id,#{ids}) > 0</if>
        </where>
        order by A.id desc
    </select>

    <select id="selectSdStrategyById" parameterType="Long" resultMap="SdStrategyResult">
        select A.id, A.tunnel_id, A.strategy_name, A.strategy_type, A.strategy_info, A.warning_id, A.strategy_state,
        		A.scheduler_time, A.job_relation_id, A.create_by, A.direction,A.event_type,A.strategy_group,
        		A.create_time, A.update_by, A.update_time, B.tunnel_name, C.s_id, C.s_name,A.timer_open,A.timer_close, A.is_automatic
        from sd_strategy A
        left join sd_tunnels B on A.tunnel_id = B.tunnel_id
        left join sd_tunnel_subarea C on B.tunnel_id = C.tunnel_id
        where A.id = #{id}
    </select>

    <select id="selectSdStrategyAndSdTriggerById" parameterType="Long" resultMap="SdStrategyResult">
        select A.id, A.tunnel_id, A.strategy_name, A.strategy_type, A.strategy_info, A.warning_id, A.strategy_state,
               A.scheduler_time, A.job_relation_id, A.create_by, A.direction, A.is_automatic
               A.create_time, A.update_by, A.update_time, B.tunnel_name,
               d.id, relate_id, d.device_type_id, d.trigger_type, d.element_id, d.compare_pattern, d.compare_value, d.element_id, d.compare_pattern, d.compare_value
        from sd_strategy a
        left join sd_tunnels b on a.tunnel_id = b.tunnel_id
        left join sd_trigger d on a.id = d.relate_id
        left join sd_trigger_device e on d.id = e.device_id
        left join sd_device_type_item f on d.element_id = f.id
        where a.id = #{id}
    </select>

    <select id="selectSdStrategyByJobRelationId" parameterType="String" resultMap="SdStrategyResult">
        <include refid="selectSdStrategyVo"/>
        where job_relation_id = #{jobRelationId}
    </select>

    <insert id="insertSdStrategy" parameterType="SdStrategy" useGeneratedKeys="true" keyProperty="id">
        insert into sd_strategy(
            <if test="tunnelId != null">tunnel_id,</if>
            <if test="strategyName != null">strategy_name,</if>
            <if test="strategyType != null">strategy_type,</if>
            <if test="eventType != null">event_type,</if>
            <if test="strategyState != null">strategy_state,</if>
            <if test="strategyInfo != null">strategy_info,</if>
            <if test="warningId != null">warning_id,</if>
            <if test="strategyGroup != null">strategy_group,</if>
            <if test="schedulerTime != null">scheduler_time,</if>
            <if test="jobRelationId != null">job_relation_id,</if>
            <if test="direction != null">direction,</if>
            <if test="createBy != null">create_by,</if>
            <if test="timerOpen != null">timer_open,</if>
            <if test="timerClose != null">timer_close,</if>
            <if test="isAutomatic != null">is_automatic,</if>
        create_time
 		)values(
            <if test="tunnelId != null">#{tunnelId},</if>
            <if test="strategyName != null">#{strategyName},</if>
            <if test="strategyType != null">#{strategyType},</if>
            <if test="eventType != null">#{eventType},</if>
            <if test="strategyState != null">#{strategyState},</if>
            <if test="strategyInfo != null">#{strategyInfo},</if>
            <if test="warningId != null">#{warningId},</if>
            <if test="strategyGroup != null">#{strategyGroup},</if>
            <if test="schedulerTime != null">#{schedulerTime},</if>
            <if test="jobRelationId != null">#{jobRelationId},</if>
            <if test="direction != null">#{direction},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="timerOpen != null">#{timerOpen},</if>
            <if test="timerClose != null">#{timerClose},</if>
            <if test="isAutomatic != null">#{isAutomatic},</if>
        sysdate()
          )
    </insert>

    <update id="updateSdStrategyById" parameterType="SdStrategy">
        update sd_strategy
        <trim prefix="SET" suffixOverrides=",">
            <if test="tunnelId != null">tunnel_id = #{tunnelId},</if>
            <if test="strategyName != null">strategy_name = #{strategyName},</if>
            <if test="strategyType != null">strategy_type = #{strategyType},</if>
            <if test="strategyState != null">strategy_state = #{strategyState},</if>
            <if test="strategyInfo != null">strategy_info = #{strategyInfo},</if>
            <if test="warningId != null">warning_id = #{warningId},</if>
            <if test="schedulerTime != null">scheduler_time = #{schedulerTime},</if>
            <if test="jobRelationId != null">job_relation_id = #{jobRelationId},</if>
            <if test="direction != null">direction = #{direction},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="strategyGroup != null">strategy_group = #{strategyGroup},</if>
            <if test="eventType != null">event_type = #{eventType},</if>
            <if test="timerOpen != null">timer_open = #{timerOpen},</if>
            <if test="timerClose != null">timer_close = #{timerClose},</if>
            <if test="isAutomatic != null">is_automatic = #{isAutomatic},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteSdStrategyById" parameterType="Long">
        delete from sd_strategy where id = #{id}
    </delete>

    <delete id="deleteSdStrategyByIds" parameterType="String">
        delete from sd_strategy where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 根据rlId删除 -->
    <!-- <delete id="deleteSdStrategyByRlIds" parameterType="String">
        delete from sd_strategy where rl_id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete> -->

    <!-- 根据rlId更新 -->
    <!-- <update id="updateSdStrategyInfoByRlId" parameterType="SdStrategy">
        update sd_strategy
        <trim prefix="SET" suffixOverrides=",">
            <if test="tunnelId != null">tunnel_id = #{tunnelId},</if>
            <if test="strategyName != null">strategy_name = #{strategyName},</if>
            <if test="strategyType != null">strategy_type = #{strategyType},</if>
            <if test="strategyInfo != null">strategy_info = #{strategyInfo},</if>
            <if test="warningId != null">warning_id = #{warningId},</if>
            <if test="schedulerTime != null">scheduler_time = #{schedulerTime},</if>
            <if test="jobRelationId != null">job_relation_id = #{jobRelationId},</if>
            <if test="direction != null">direction = #{direction},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where rl_id = #{rlId}
    </update> -->

    <!-- 根据rlId查询 -->
    <!-- <select id="selectStrategyList" parameterType="SdStrategy" resultMap="SdStrategyResult">
        select A.id, A.tunnel_id, A.strategy_name, A.strategy_type, A.strategy_info, A.warning_id,
        A.scheduler_time, A.rl_id, A.job_relation_id, A.direction,A.create_by,
        A.create_time, A.update_by, A.update_time
        from sd_strategy A
        <where>
            <if test="rlId != null  and rlId != ''"> and A.rl_id = #{rlId}</if>
        </where>
    </select> -->

    <select id="checkStrategyIfExist" resultType="int">
        SELECT
            count(*)
        FROM
            sd_strategy s
                RIGHT JOIN sd_event e ON CONCAT( s.id, '' )= e.currency_id
        WHERE
            1 = 1
          AND s.id = #{id}
    </select>

    <select id="getManualStrategy" resultType="hashmap" >
        SELECT
            s.id strategyId,
            r.id strategyRLId,
            s.strategy_name strategyName,
            s.strategy_type strategyType,
            r.eq_type_id eqTypeId
        FROM
            sd_strategy s
                INNER JOIN sd_strategy_rl r ON s.id = r.strategy_id
                AND s.strategy_type = '0'
        GROUP BY
            s.id;
    </select>
    <select id="getStrategyRefJobIds" parameterType="String" resultType="long">
        select GROUP_CONCAT(strategy.job_relation_id) as jobIds from sd_strategy strategy
        where strategy.id in (#{ids})
        GROUP BY strategy.strategy_type
    </select>

    <select id="getTimeSharingInfo"  parameterType="String" resultType="hashmap" >
        SELECT id as strategy_id,strategy_name,strategy_state,concat(timer_open,'-',timer_close) as time,scheduler_time FROM sd_strategy
            where strategy_type = '1' and strategy_group = '1' and tunnel_id = #{tunnelId}  order by sd_strategy.id desc
    </select>

    <select id="getSafetyHandle" parameterType="sdStrategy" resultType="sdStrategy">
        SELECT
            s.id,
            sr.id AS strategyRlId,
            sr.disposal_name AS disposalName
        FROM
            sd_strategy s
                LEFT JOIN sd_strategy_rl sr ON s.id = sr.strategy_id
        WHERE
            1 = 1
          AND s.tunnel_id = #{tunnelId}
          AND s.strategy_type = '0'
          AND s.strategy_group = '2'
          AND s.event_type = #{eventType}
          AND s.direction = #{direction}
    </select>
    <select id="workTriggerInfo"  parameterType="String" resultType="hashmap">
        select strategy.id,concat(item.item_name,'预警')as name,concat(
        case when tri.compare_pattern = '0' then '<![CDATA[>]]>'
            when tri.compare_pattern = '1' then '<![CDATA[>=]]>'
            when tri.compare_pattern = '2' then '<![CDATA[<]]>'
            when tri.compare_pattern = '3' then '<![CDATA[<=]]>'
            when tri.compare_pattern = '4' then '<![CDATA[=]]>'
        end,tri.compare_value) str ,strategy.strategy_name ,strategy.strategy_state as strategyState from sd_strategy strategy
        inner join sd_trigger tri on tri.relate_id = strategy.id
        left join sd_device_type_item item on (item.id = tri.element_id
        and tri.device_type_id = item.device_type_id) where strategy.tunnel_id = #{tunnelId}
        order by strategy.id desc
    </select>

    <select id="checkStrategy" parameterType="SdStrategy" resultType="int">
        select
            count(*)
        from sd_strategy A
        left join sd_tunnels B on A.tunnel_id = B.tunnel_id
        <where>
            <if test="id != null">and A.id <![CDATA[ <> ]]> #{id}</if>
            <if test="tunnelId != null and tunnelId != ''"> and A.tunnel_id = #{tunnelId}</if>
            <if test="strategyType != null  and strategyType != ''"> and A.strategy_type = #{strategyType}</if>
            <if test="direction != null  and direction != ''"> and A.direction = #{direction}</if>
            <if test="eventType != null  and eventType != ''"> and A.event_type = #{eventType}</if>
            <if test="isAutomatic != null  and isAutomatic != ''"> and A.is_automatic = #{isAutomatic}</if>
        </where>
        order by A.id desc
    </select>

    <select id="getEventStrategyData" parameterType="sdStrategy" resultType="hashmap">
        SELECT
            s.id AS strategyId,
            s.strategy_type AS strategyType,
            sr.equipments,
            sr.state,
            sr.id,
            sr.effective_time AS effectiveFime,
            sr.eq_type_id AS eqTypeId
        FROM
            sd_strategy s
                LEFT JOIN sd_strategy_rl sr ON s.id = sr.strategy_id
        WHERE
            1 = 1
          AND s.strategy_type = '0'
          AND s.tunnel_id = #{tunnelId}
          AND s.direction = #{direction}
          AND s.event_type = #{eventType}
          AND s.is_automatic = '1'
    </select>

    <select id="checkStrName" resultType="int" parameterType="sdStrategy">
        SELECT
            count(*)
        FROM
            sd_strategy
        WHERE
            1 = 1
          AND strategy_name = #{strategyName}
          AND strategy_type = #{strategyType}
          AND strategy_group = #{strategyGroup}
        <if test="id != null">
            AND id <![CDATA[ <> ]]> #{id}
        </if>
    </select>

    <select id="getSdStrategyAll" parameterType="SdStrategy" resultMap="SdStrategyResult">
        <include refid="selectSdStrategyVo"/>
        LEFT JOIN sd_strategy_rl ON sd_strategy_rl.strategy_id = sd_strategy.id
        <where>
        1=1 and  (sd_strategy_rl.eq_type_id ="9" or sd_strategy_rl.eq_type_id ="7")
        <if test="strategyGroup != null  and strategyGroup != ''"> and sd_strategy.strategy_group = #{strategyGroup}</if>
        <if test="strategyType != null  and strategyType != ''"> and sd_strategy.strategy_type = #{strategyType}</if>
        </where>
    </select>
</mapper>

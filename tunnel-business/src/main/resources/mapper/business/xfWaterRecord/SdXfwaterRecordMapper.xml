<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tunnel.business.mapper.xfWaterRecord.SdXfwaterRecordMapper">

    <resultMap type="SdXfwaterRecord" id="SdXfwaterRecordResult">
        <result property="id"    column="id"    />
        <result property="equipmentId"    column="equipment_id"    />
        <result property="deptId"    column="dept_id"    />
        <result property="electricity"    column="electricity"    />
        <result property="intervalTime"    column="interval_time"    />
        <result property="signalInfo"    column="signal_info"    />
        <result property="analogQuantity"    column="analog_quantity"    />
        <result property="state"    column="state"    />
        <result property="low"    column="low"    />
        <result property="highest"    column="highest"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="tunnelId"    column="tunnel_id"    />
        <result property="tunnelName"    column="tunnel_name"    />
        <result property="position"    column="position"    />
        <result property="equipmentName"    column="equipment_name"    />
        <result property="eqDirection" column="eq_direction"/>
    </resultMap>

    <sql id="selectSdXfwaterRecordVo">
        select id, equipment_id, dept_id, electricity, interval_time, signal_info, analog_quantity, state, low,
               highest, create_by, create_time, tunnel_id, tunnel_name, position, equipment_name,eq_direction from sd_xfwater_record
    </sql>

    <select id="selectSdXfwaterRecordList" parameterType="SdXfwaterRecord" resultMap="SdXfwaterRecordResult">
        <include refid="selectSdXfwaterRecordVo"/>
        <where>
            <if test="equipmentId != null  and equipmentId != ''"> and equipment_id = #{equipmentId}</if>
            <if test="electricity != null  and electricity != ''"> and electricity = #{electricity}</if>
            <if test="intervalTime != null  and intervalTime != ''"> and interval_time = #{intervalTime}</if>
            <if test="signalInfo != null  and signalInfo != ''"> and signal_info = #{signalInfo}</if>
            <if test="analogQuantity != null  and analogQuantity != ''"> and analog_quantity = #{analogQuantity}</if>
            <if test="state != null  and state != ''"> and state = #{state}</if>
            <if test="low != null  and low != ''"> and low = #{low}</if>
            <if test="highest != null  and highest != ''"> and highest = #{highest}</if>
            <if test="tunnelId != null  and tunnelId != ''"> and tunnel_id = #{tunnelId}</if>
            <if test="params.beginChangeTime != null and params.beginChangeTime != '' and params.endChangeTime != null and params.endChangeTime != ''">
                and create_time between CONCAT(#{params.beginChangeTime}," 00:00:00") and CONCAT(#{params.endChangeTime}," 23:59:59")
            </if>
            <if test="eqDirection != null and eqDirection != ''"> and eq_direction = #{eqDirection} </if>
            <if test="deptId != null and deptId != ''">
                AND (dept_id = #{deptId} OR dept_id IN ( SELECT d.dept_id FROM sys_dept d WHERE FIND_IN_SET (#{deptId},d.ancestors) ))
            </if>
        </where>
    </select>

    <select id="selectSdXfwaterRecordById" parameterType="Long" resultMap="SdXfwaterRecordResult">
        <include refid="selectSdXfwaterRecordVo"/>
        where id = #{id}
    </select>

    <insert id="insertSdXfwaterRecord" parameterType="SdXfwaterRecord" useGeneratedKeys="true" keyProperty="id">
        insert into sd_xfwater_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="equipmentId != null">equipment_id,</if>
            <if test="deptId != null">dept_id,</if>
            <if test="electricity != null">electricity,</if>
            <if test="intervalTime != null">interval_time,</if>
            <if test="signalInfo != null">signal_info,</if>
            <if test="analogQuantity != null">analog_quantity,</if>
            <if test="state != null">state,</if>
            <if test="low != null">low,</if>
            <if test="highest != null">highest,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="tunnelId != null">tunnel_id,</if>
            <if test="tunnelName != null">tunnel_name,</if>
            <if test="position != null">position,</if>
            <if test="equipmentName != null">equipment_name,</if>
            <if test="eqDirection != null">eq_direction,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="equipmentId != null">#{equipmentId},</if>
            <if test="deptId != null">#{deptId},</if>
            <if test="electricity != null">#{electricity},</if>
            <if test="intervalTime != null">#{intervalTime},</if>
            <if test="signalInfo != null">#{signalInfo},</if>
            <if test="analogQuantity != null">#{analogQuantity},</if>
            <if test="state != null">#{state},</if>
            <if test="low != null">#{low},</if>
            <if test="highest != null">#{highest},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="tunnelId != null">#{tunnelId},</if>
            <if test="tunnelName != null">#{tunnelName},</if>
            <if test="position != null">#{position},</if>
            <if test="equipmentName != null">#{equipmentName},</if>
            <if test="eqDirection != null">#{eqDirection},</if>
         </trim>
    </insert>

    <update id="updateSdXfwaterRecord" parameterType="SdXfwaterRecord">
        update sd_xfwater_record
        <trim prefix="SET" suffixOverrides=",">
            <if test="equipmentId != null">equipment_id = #{equipmentId},</if>
            <if test="deptId != null">dept_id = #{deptId},</if>
            <if test="electricity != null">electricity = #{electricity},</if>
            <if test="intervalTime != null">interval_time = #{intervalTime},</if>
            <if test="signalInfo != null">signal_info = #{signalInfo},</if>
            <if test="analogQuantity != null">analog_quantity = #{analogQuantity},</if>
            <if test="state != null">state = #{state},</if>
            <if test="low != null">low = #{low},</if>
            <if test="highest != null">highest = #{highest},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="tunnelId != null">tunnel_id = #{tunnelId},</if>
            <if test="tunnelName != null">tunnel_name = #{tunnelName},</if>
            <if test="position != null">position = #{position},</if>
            <if test="equipmentName != null">equipment_name = #{equipmentName},</if>
            <if test="eqDirection != null">eq_direction = #{eqDirection},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteSdXfwaterRecordById" parameterType="Long">
        delete from sd_xfwater_record where id = #{id}
    </delete>

    <delete id="deleteSdXfwaterRecordByIds" parameterType="String">
        delete from sd_xfwater_record where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getNumberOfPressureGaugesCollectedPerDay" resultMap="SdXfwaterRecordResult">
        SELECT * from sd_xfwater_record
        WHERE equipment_id = #{equipmentId} and tunnel_id = #{tunnelId} ORDER BY id desc LIMIT 1
    </select>

    <select id="getAllPressureGaugesCollectedPerDay" resultType="hashmap">
        SELECT count(*) sumallreport from sd_xfwater_record
        WHERE TO_DAYS(create_time) = TO_DAYS(NOW())
        <if test="deptId != null and deptId != ''">
            AND (dept_id = #{deptId} OR dept_id IN ( SELECT d.dept_id FROM sys_dept d WHERE FIND_IN_SET (#{deptId},d.ancestors) ))
        </if>
    </select>

    <select id="getNumberOfPressureGaugesCollectedPerMonth" resultType="hashmap">
        SELECT a.id, a.equipment_id, a.dept_id, a.electricity, a.interval_time, a.signal_info, a.analog_quantity,
               a.state, a.low, a.highest, a.create_by, a.create_time, b.eq_name,c.tunnel_name,a.position,a.tunnel_id,a.eq_direction
        from sd_xfwater_record a
                 left join sd_devices b on a.equipment_id = b.eq_id
                 left join sd_tunnels c on b.eq_tunnel_id = c.tunnel_id
        WHERE a.equipment_id = #{equipmentId}
          and DATE_FORMAT(a.create_time,'%Y-%m') = DATE_FORMAT(NOW(),'%Y-%m')
        ORDER BY a.id DESC
    </select>

    <select id="getRecentRecordByEqId" resultMap="SdXfwaterRecordResult">
        SELECT a.id, a.equipment_id, a.dept_id, a.electricity, a.interval_time, a.signal_info, a.analog_quantity,
               a.state, a.low, a.highest, a.create_by, a.create_time,a.tunnel_name,a.position,a.tunnel_id,a.eq_direction
        from sd_xfwater_record a
        WHERE a.equipment_id = #{equipmentId}
        <if test="deptId != null and deptId != ''">
            AND (a.dept_id = #{deptId} OR a.dept_id IN ( SELECT d.dept_id FROM sys_dept d WHERE FIND_IN_SET (#{deptId},d.ancestors) ))
        </if>
        ORDER BY a.id DESC LIMIT 1
    </select>

    <select id="selectWarningInfoMsg" resultType="hashmap">
        select a.*,b.eq_direction from sd_warning_info a
        left join sd_devices b on a.eq_id = b.eq_id
        WHERE a.eq_id = #{eqId}
          and a.tunnel_id = #{tunnelId}
          and a.warning_time between #{params.beginChangeTime} and #{params.endChangeTime}
    </select>

    <select id="selectWarningInfoMsgByYear" resultType="hashmap">
        SELECT
            IFNULL(b.num,0) as num,RIGHT(a.date,5) as date,#{params.tunnelName} as tunnel_name
        from
            (
                SELECT CONCAT(#{params.year},"-01") as date union
                SELECT CONCAT(#{params.year},"-02") as date union
                SELECT CONCAT(#{params.year},"-03") as date union
                SELECT CONCAT(#{params.year},"-04") as date union
                SELECT CONCAT(#{params.year},"-05") as date union
                SELECT CONCAT(#{params.year},"-06") as date union
                SELECT CONCAT(#{params.year},"-07") as date union
                SELECT CONCAT(#{params.year},"-08") as date union
                SELECT CONCAT(#{params.year},"-09") as date union
                SELECT CONCAT(#{params.year},"-10") as date union
                SELECT CONCAT(#{params.year},"-11") as date union
                SELECT CONCAT(#{params.year},"-12") as date
            ) a
                left join
            ( select DATE_FORMAT(c.warning_time, '%Y-%m') warning_time,count(c.id) num from
                sd_warning_info c
            left join sd_tunnels e on c.tunnel_id = e.tunnel_id
            where year ( c.warning_time) = #{params.year}
                <if test="eqId != null and eqId != ''"> and c.eq_id = #{eqId}</if> and c.tunnel_id = #{tunnelId}
            <if test="params.deptId != null and params.deptId != ''">
                AND (e.dept_id = #{params.deptId} OR e.dept_id IN ( SELECT d.dept_id FROM sys_dept d WHERE FIND_IN_SET (#{params.deptId},d.ancestors) ))
            </if>
            group by month ( c.warning_time )) b
            on a.date = b.warning_time
            where date &lt;= DATE_FORMAT(now(), '%Y-%m')
            order by a.date
    </select>

    <select id="selectWarningInfoMsgByMonth" resultType="hashmap">
        SELECT t1.curr_date,
        ifnull(t3.sum_flow_num,0) AS sum_flow_num,#{params.tunnelName} tunnel_name
        FROM(
        SELECT date_format( date_add(#{lastDayOfMonth}, INTERVAL - t.help_topic_id DAY ), '%Y-%m-%d' ) AS 'curr_date'
        FROM mysql.help_topic t
        WHERE t.help_topic_id <![CDATA[<]]> DATEDIFF(#{lastDayOfMonth}, concat(#{params.month},'-01')) + 1) t1
        LEFT JOIN (
        SELECT DATE_FORMAT(t2.warning_time, "%Y-%m-%d" ) AS date_str,
        count(t2.id ) AS sum_flow_num,#{params.tunnelName} tunnel_name
        FROM sd_warning_info AS t2
        left join sd_tunnels b on b.tunnel_id = t2.tunnel_id
        WHERE 1=1 <if test="eqId != null and eqId != ''"> and t2.eq_id = #{eqId}</if> and t2.tunnel_id = #{tunnelId}
        <if test="params.deptId != null and params.deptId != ''">
            AND (b.dept_id = #{params.deptId} OR b.dept_id IN ( SELECT d.dept_id FROM sys_dept d WHERE FIND_IN_SET (#{params.deptId},d.ancestors) ))
        </if>
        GROUP BY DATE_FORMAT(t2.warning_time, "%Y-%m-%d" )) t3
        ON t1.curr_date = t3.date_str  ORDER BY t1.curr_date
    </select>

    <select id="selectWarningInfoMsgByDay" resultType="hashmap">
        select a.order_hour as order_hour, ifnull(b.num, 0) as num,#{params.tunnelName} tunnel_name
        from (
        SELECT 0 AS order_hour UNION ALL SELECT 1 AS order_hour UNION ALL
        SELECT 2 AS order_hour UNION ALL SELECT 3 AS order_hour UNION ALL
        SELECT 4 AS order_hour UNION ALL SELECT 5 AS order_hour UNION ALL
        SELECT 6 AS order_hour UNION ALL SELECT 7 AS order_hour UNION ALL
        SELECT 8 AS order_hour UNION ALL SELECT 9 AS order_hour UNION ALL
        SELECT 10 AS order_hour UNION ALL SELECT 11 AS order_hour UNION ALL
        SELECT 12 AS order_hour UNION ALL SELECT 13 AS order_hour UNION ALL
        SELECT 14 AS order_hour UNION ALL SELECT 15 AS order_hour UNION ALL
        SELECT 16 AS order_hour UNION ALL SELECT 17 AS order_hour UNION ALL
        SELECT 18 AS order_hour UNION ALL SELECT 19 AS order_hour UNION ALL
        SELECT 20 AS order_hour UNION ALL SELECT 21 AS order_hour UNION ALL
        SELECT 22 AS order_hour UNION ALL SELECT 23 AS order_hour
        ) as a
        LEFT JOIN
        (
        SELECT HOUR(c.warning_time) AS order_hour, count(c.id) AS num,#{params.tunnelName} tunnel_name
        FROM sd_warning_info c
        left join sd_tunnels e on e.tunnel_id = c.tunnel_id
        WHERE c.warning_time <![CDATA[>=]]> str_to_date(#{params.datea},'%Y-%m-%d %T')
        AND c.warning_time <![CDATA[<=]]> str_to_date(#{params.dateb},'%Y-%m-%d %T')
        <if test="eqId != null and eqId != ''"> and c.eq_id = #{eqId}</if>
        <if test="params.deptId != null and params.deptId != ''">
            AND (e.dept_id = #{params.deptId} OR e.dept_id IN ( SELECT d.dept_id FROM sys_dept d WHERE FIND_IN_SET (#{params.deptId},d.ancestors) ))
        </if>
        and c.tunnel_id = #{tunnelId}
        GROUP BY order_hour
        ) b ON a.order_hour=b.order_hour
        ORDER BY order_hour;
    </select>

    <select id="selectXfRecord" resultType="hashmap">
        select * from sd_xfwater_record
        WHERE equipment_id = #{equipmentId}
          and tunnel_id = #{tunnelId}
          and create_time between #{params.beginChangeTime} and #{params.endChangeTime}
    </select>
</mapper>

spring:
  kafka:
    listener:
      ack-mode: manual_immediate
    wanji:
      bootstrap-servers: 10.3.16.40:9092 # kafka集群信息，多个用逗号间隔
      # 生产者
      producer:
        # 重试次数，设置大于0的值，则客户端会将发送失败的记录重新发送
        retries: 3
        batch-size: 16384 #批量处理大小，16K
        buffer-memory: 33554432 #缓冲存储大，32M
        acks: 1
        # 指定消息key和消息体的编解码方式
        value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
        key-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
  #      key-serializer: org.apache.kafka.common.serialization.StringSerializer
  #      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 消费者
      consumer:
        # 消费者组
        group-id: TestGroup
        # 是否自动提交
        enable-auto-commit: false
        # 消费偏移配置
        # none：如果没有为消费者找到先前的offset的值,即没有自动维护偏移量,也没有手动维护偏移量,则抛出异常
        # earliest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从头开始消费
        # latest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从最新的数据开始消费
        auto-offset-reset: latest
  #      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
  #      key-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
        bootstrap-servers: 10.3.16.40:9092
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        max-poll-records: 500
      # 监听
  #    listener:
  #      # record：当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
  #      # batch：当每一批poll()的数据被ListenerConsumer处理之后提交
  #      # time：当每一批poll()的数据被ListenerConsumer处理之后，距离上次提交时间大于TIME时提交
  #      # count：当每一批poll()的数据被ListenerConsumer处理之后，被处理record数量大于等于COUNT时提交
  #      # count_time：TIME或COUNT中有一个条件满足时提交
  #      # manual：当每一批poll()的数据被ListenerConsumer处理之后, 手动调用Acknowledgment.acknowledge()后提交
  #      # manual_immediate：手动调用Acknowledgment.acknowledge()后立即提交，一般推荐使用这种
  #      ack-mode: manual_immediate
#spring:
#  kafka:
    wulian:
      bootstrap-servers: 10.166.139.204:9092,10.166.139.205:9092,10.166.139.206:9092
      producer:
        # 重试次数，设置大于0的值，则客户端会将发送失败的记录重新发送
#        retries: 3
#        batch-size: 16384 #批量处理大小，16K
#        buffer-memory: 33554432 #缓冲存储大，32M
#        acks: 1
        # 指定消息key和消息体的编解码方式
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.StringSerializer
        security:
          protocol: SASL_PLAINTEXT
          properties:
            sasl:
              mechanism: SCRAM-SHA-256
              jaas:
                config: org.apache.kafka.common.security.scram.ScramLoginModule required username='jq_tunnel' password='Sdhsg2021';
      consumer:
        group-id: tetet5ea
        enable-auto-commit: false # 不自动签收
        auto-offset-reset: earliest  #kafka出现错误重启后，会找到未消费的offset继续消费
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        max-poll-records: 5
        security:
          protocol: SASL_PLAINTEXT
          properties:
            sasl:
              mechanism: SCRAM-SHA-256
              jaas:
                config: org.apache.kafka.common.security.scram.ScramLoginModule required username='jq_tunnel' password='Sdhsg2021';
  #    listener:
  #      ack-mode: manual
#      concurrency: 3

sso:
  # 获取授权码
  authCode: http://10.166.157.192:31315/auth/sso/test/code
  # 获取Token
  token: http://10.166.157.192:31315/auth/sso/token
  # 获取当前登录用户信息
  userInfo: http://10.166.157.192:31315/sys/user/info
  # 获取组织机构树
  deptTree: http://10.166.157.192:31315/sys/dept/tree/get_tree_all
  # 获取组织机构下的用户信息
  userList: http://10.166.157.192:31315/sys/user/getUserListByCompanyAndDept

  #业务中台分配应用ID
  appId: jq_tunnel_server

device:
  light:
    sanjing:
      base: http://47.119.189.80:8888
      login: ${device.light.sanjing.base}/login
      brightness: ${device.light.sanjing.base}/api/adjustBrightness
      lineControl: ${device.light.sanjing.base}/api/lineControl
      deviceData: ${device.light.sanjing.base}/api/getLatestDeviceData
